{
  "openapi": "3.0.0",
  "paths": {
    "/health": {
      "get": {
        "operationId": "AppController_getRoutesInfo",
        "summary": "to prove the live status of website",
        "parameters": [],
        "responses": {
          "200": {
            "description": "live status confirmed"
          }
        },
        "tags": [
          "User-OIDC"
        ]
      }
    },
    "/login": {
      "post": {
        "operationId": "AppController_loginRoute",
        "summary": "creates an opaque token for a user logined if no resource parameter is given",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "ashu",
                    "description": "this is name of user"
                  },
                  "password": {
                    "type": "string",
                    "example": "ashu",
                    "description": "this is password of user"
                  },
                  "scopes": {
                    "type": "string",
                    "example": "openid email profile",
                    "description": "this displays scopes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "opaque token generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "String",
                        "description": "this shows the generated message for given input ",
                        "example": "jwt token generated "
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "access_tokens": {
                            "type": "String",
                            "description": "this is the generated opaque token ",
                            "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6ImF0K2p3dCIsImtpZCI6IlRMcnZaeEp6U1JzbUc2aXNwYTU0RWFDbzFzZ1hUZmx2cmUwMEtPeUdDZncifQ.eyJqdGkiOiJYSktyZmNMaThyYnJKZWtldWJCMVIiLCJzdWIiOiJhcHAiLCJpYXQiOjE3MTY5MTMxMDYsImV4cCI6MTcxNjkxNjcwNiwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImNsaWVudF9pZCI6ImFwcCIsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCIsImF1ZCI6InN0ZW5jaWw6YXBpIn0.fTjzWUnPKrIjHJabhcey_s5JTHSCMwkxF2kk4uo6VOyWNDr5_vnJN5gBTVzxlwE7YjLWioafWLgmcBiod3fCXdCxLoQokajDc7k4Ib1ueAucMItKV1YbHL1OaQ4Mq66ls5fuD1LSi1XunoRJkLHeSX9i7kJsd-0eBfaWi32XTtDZjyNAlys8sW3bWDW_e4XimsWeqt10Tdf7ARLRkjHhnLfrHUB33t8DASjSWdjpmi8YVnwpmB1au8Wj2MSWI1BrDxladt0blkmVVE3okoX6QXSn_WLiFNC4mY30ExTM1QMow-4pH0FrBMgkjSRgnARGSKVa-RyqIq2ocg2XY1nTbQ"
                          },
                          "expires_in": {
                            "type": "integer",
                            "description": "this is the expiry time of the token",
                            "example": "600"
                          },
                          "token_type": {
                            "type": "String",
                            "description": "this shows the type of token ",
                            "example": "Bearer"
                          },
                          "scope": {
                            "type": "String",
                            "description": "this is the scope of token",
                            "example": "openid email profile"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials, username and password missing in body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "String",
                        "description": "this shows the generated message for given input ",
                        "example": "Invalid credentials, username and password missing in body"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid resource type, send the resource in xyz:abc format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "String",
                        "description": "this shows the generated message for given input ",
                        "example": "Invalid resource type, send the resource in xyz:abc format"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "String",
                        "description": "this shows the generated message for given input ",
                        "example": "Internal server error"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User-OIDC"
        ]
      }
    },
    "/opaque-verify": {
      "post": {
        "operationId": "AppController_opaque_verify",
        "summary": "verifies the generated opaque token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "ybc38pCHaizks0bMFBbKhqy9ZKqawdHH6LV5ZcrshNn",
                    "description": "this is auto generated opaque token"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "opaque token verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "active": {
                        "type": "Boolean",
                        "description": "this shows the generated message for given input ",
                        "example": "true"
                      },
                      "client_id": {
                        "type": "String",
                        "description": "this is the generated opaque token ",
                        "example": "app"
                      },
                      "exp": {
                        "type": "integer",
                        "description": "this is the expiry time of the token",
                        "example": "1716913835"
                      },
                      "iat": {
                        "type": "integer",
                        "description": "this shows the type of token ",
                        "example": "1716913235"
                      },
                      "iss": {
                        "type": "String",
                        "description": "this is the scope of token",
                        "example": "http://localhost:3000"
                      },
                      "scope": {
                        "type": "String",
                        "description": "this is the scope of token",
                        "example": "openid"
                      },
                      "token_type": {
                        "type": "String",
                        "description": "this is the scope of token",
                        "example": "Bearer"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No token is given",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "String",
                        "description": "this shows the generated message for given input ",
                        "example": "Invalid credentials, username and password missing in body"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "String",
                        "description": "this shows the generated message for given input ",
                        "example": "Invalid credentials, username and password missing in body"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User-OIDC"
        ]
      }
    },
    "/jwt-verify": {
      "post": {
        "operationId": "AppController_jwt_verify",
        "summary": "verifies the generated jwt token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6ImF0K2p3dCIsImtpZCI6IlRMcnZaeEp6U1JzbUc2aXNwYTU0RWFDbzFzZ1hUZmx2cmUwMEtPeUdDZncifQ.eyJqdGkiOiJYSktyZmNMaThyYnJKZWtldWJCMVIiLCJzdWIiOiJhcHAiLCJpYXQiOjE3MTY5MTMxMDYsImV4cCI6MTcxNjkxNjcwNiwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImNsaWVudF9pZCI6ImFwcCIsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCIsImF1ZCI6InN0ZW5jaWw6YXBpIn0.fTjzWUnPKrIjHJabhcey_s5JTHSCMwkxF2kk4uo6VOyWNDr5_vnJN5gBTVzxlwE7YjLWioafWLgmcBiod3fCXdCxLoQokajDc7k4Ib1ueAucMItKV1YbHL1OaQ4Mq66ls5fuD1LSi1XunoRJkLHeSX9i7kJsd-0eBfaWi32XTtDZjyNAlys8sW3bWDW_e4XimsWeqt10Tdf7ARLRkjHhnLfrHUB33t8DASjSWdjpmi8YVnwpmB1au8Wj2MSWI1BrDxladt0blkmVVE3okoX6QXSn_WLiFNC4mY30ExTM1QMow-4pH0FrBMgkjSRgnARGSKVa-RyqIq2ocg2XY1nTbQ",
                    "description": "this is auto generated jwt token"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "jwt token verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "header": {
                        "type": "object",
                        "properties": {
                          "alg": {
                            "type": "String",
                            "description": "this is the scope of token",
                            "example": "RS256"
                          },
                          "typ": {
                            "type": "String",
                            "description": "this is the scope of token",
                            "example": "at+jwt"
                          },
                          "kid": {
                            "type": "String",
                            "description": "this is the scope of token",
                            "example": "TLrvZxJzSRsmG6ispa54EaCo1sgXTflvre00KOyGCfw"
                          }
                        }
                      },
                      "payload": {
                        "type": "object",
                        "properties": {
                          "jti": {
                            "type": "String",
                            "description": "this is the scope of token",
                            "example": "XJKrfcLi8rbrJekeubB1R"
                          },
                          "sub": {
                            "type": "String",
                            "description": "this is the scope of token",
                            "example": "app"
                          },
                          "iat": {
                            "type": "integer",
                            "description": "this is the scope of token",
                            "example": "1716913106"
                          },
                          "exp": {
                            "type": "integer",
                            "description": "this is the scope of token",
                            "example": "1716916706"
                          },
                          "scope": {
                            "type": "String",
                            "description": "this is the scope of token",
                            "example": "openid email profile"
                          },
                          "client_id": {
                            "type": "String",
                            "description": "this is the scope of token",
                            "example": "app"
                          },
                          "iss": {
                            "type": "String",
                            "description": "this is the scope of token",
                            "example": "http://localhost:3000"
                          },
                          "aud": {
                            "type": "String",
                            "description": "this is the scope of token",
                            "example": "stencil:api"
                          }
                        }
                      },
                      "signature": {
                        "type": "string",
                        "example": "fTjzWUnPKrIjHJabhcey_s5JTHSCMwkxF2kk4uo6VOyWNDr5_vnJN5gBTVzxlwE7YjLWioafWLgmcBiod3fCXdCxLoQokajDc7k4Ib1ueAucMItKV1YbHL1OaQ4Mq66ls5fuD1LSi1XunoRJkLHeSX9i7kJsd-0eBfaWi32XTtDZjyNAlys8sW3bWDW_e4XimsWeqt10Tdf7ARLRkjHhnLfrHUB33t8DASjSWdjpmi8YVnwpmB1au8Wj2MSWI1BrDxladt0blkmVVE3okoX6QXSn_WLiFNC4mY30ExTM1QMow-4pH0FrBMgkjSRgnARGSKVa-RyqIq2ocg2XY1nTbQ"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No token is given",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "String",
                        "description": "this shows the generated message for given input ",
                        "example": "Invalid credentials, username and password missing in body"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "String",
                        "description": "this shows the generated message for given input ",
                        "example": "Invalid credentials, username and password missing in body"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User-OIDC"
        ]
      }
    },
    "/signup": {
      "post": {
        "operationId": "AppController_signupRoute",
        "summary": "creates new user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "ashu",
                    "description": "this is name of user"
                  },
                  "password": {
                    "type": "string",
                    "example": "ashu",
                    "description": "this is password of user"
                  },
                  "email": {
                    "type": "integer",
                    "example": "ashu@gmail.com",
                    "description": "this is email id of user"
                  },
                  "birthdate": {
                    "type": "integer",
                    "example": "23-04-2023",
                    "description": "this is birthdate of user"
                  },
                  "gender": {
                    "type": "string",
                    "example": "Male",
                    "description": "this gender of user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "String",
                        "description": "this is the descirption generated",
                        "example": "User created successfully "
                      },
                      "newUser": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "this is the id of user ",
                            "example": "17"
                          },
                          "birthdate": {
                            "type": "string",
                            "description": "this is the DOB of user",
                            "example": "23-04-2023"
                          },
                          "gender": {
                            "type": "String",
                            "description": "this is the gender of user",
                            "example": "Male"
                          },
                          "username": {
                            "type": "String",
                            "description": "this is username taken by user",
                            "example": "ashu"
                          },
                          "email": {
                            "type": "String",
                            "description": "this is email id of user",
                            "example": "ashu@gmail.com"
                          },
                          "password": {
                            "type": "String",
                            "description": "this is the password of user",
                            "example": "ashu"
                          },
                          "token": {
                            "type": "String",
                            "description": "this is token generated for user",
                            "example": "null"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "String",
                        "description": "this shows the generated message for given input ",
                        "example": "Invalid fields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Duplicate entry",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "String",
                        "description": "this shows the generated message for given input ",
                        "example": "Duplicate entry"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "String",
                        "description": "this shows the generated message for given input ",
                        "example": "Internal server error"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User-OIDC"
        ]
      }
    },
    "/tenant": {
      "post": {
        "operationId": "TenantController_createATenantWithRandomUUID",
        "summary": "Create a tenant with random UUID",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Authorization header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Tenant data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tenant created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "Tenant"
        ]
      },
      "get": {
        "operationId": "TenantController_returnAllTenants",
        "summary": "Get all tenants",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Authorization header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenants found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "Tenant"
        ]
      }
    },
    "/tenant/{id}": {
      "get": {
        "operationId": "TenantController_returnATenant",
        "summary": "Get a tenant by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Authorization header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "Tenant"
        ]
      },
      "post": {
        "operationId": "TenantController_createATenant",
        "summary": "Create a tenant with specified ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Authorization header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Tenant data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tenant created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "Tenant"
        ]
      },
      "patch": {
        "operationId": "TenantController_updateATenant",
        "summary": "Update a tenant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Authorization header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Tenant data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tenant updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "Tenant"
        ]
      },
      "delete": {
        "operationId": "TenantController_deleteATenant",
        "summary": "Delete a tenant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Authorization header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "Tenant"
        ]
      }
    },
    "/oidc/*": {
      "get": {
        "operationId": "OidcController_mountedOidc_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "OidcController_mountedOidc_post",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "OidcController_mountedOidc_put",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "OidcController_mountedOidc_delete",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "OidcController_mountedOidc_patch",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "options": {
        "operationId": "OidcController_mountedOidc_options",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "head": {
        "operationId": "OidcController_mountedOidc_head",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "search": {
        "operationId": "OidcController_mountedOidc_search",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/user/all": {
      "get": {
        "operationId": "UserController_getAllUsers",
        "summary": "verifies the generated jwt token",
        "parameters": [],
        "responses": {
          "200": {
            "description": "jwt token verified"
          },
          "401": {
            "description": "No token is given"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/application": {
      "get": {
        "operationId": "ApplicationController_allApplications",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "ApplicationController_createAnApplicationWithRandomUUID",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/application/{id}": {
      "get": {
        "operationId": "ApplicationController_getAnApplication",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "ApplicationController_createAnApplication",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "ApplicationController_updateApplication",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "ApplicationController_deleteApplication",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hardDelete",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/application/{id}/role": {
      "post": {
        "operationId": "ApplicationController_createRoleWithRandomUUID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/application/{id}/role/{roleId}": {
      "post": {
        "operationId": "ApplicationController_createRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "ApplicationController_deleteRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "ApplicationController_updateRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/application/{id}/scope": {
      "post": {
        "operationId": "ApplicationController_createScopeWithRandomUUID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/application/{id}/scope/{scopeId}": {
      "post": {
        "operationId": "ApplicationController_createScope",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "ApplicationController_deleteScope",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "ApplicationController_updateScope",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/application/{id}/oauth-configuration": {
      "get": {
        "operationId": "ApplicationController_returnOauthConfiguration",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/key": {
      "get": {
        "operationId": "KeyController_retrieveAllKey",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/key/{id}": {
      "get": {
        "operationId": "KeyController_retrieveUniqueKey",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "KeyController_udpatingKey",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "KeyController_deletingKey",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/key/generate": {
      "post": {
        "operationId": "KeyController_randomgenerateKey",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/key/generate/{id}": {
      "post": {
        "operationId": "KeyController_generateKey",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/generateKeyDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
<<<<<<< HEAD
    "/group": {
      "post": {
        "operationId": "GroupsController_createGroup",
        "parameters": [],
=======
    "/jwt/refresh": {
      "post": {
        "operationId": "RefreshTokensController_refreshToken",
        "parameters": [
          {
            "name": "refreshToken",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/refreshDTO"
              }
            }
          }
        },
>>>>>>> refresh-token-api
        "responses": {
          "201": {
            "description": ""
          }
        }
      },
      "get": {
<<<<<<< HEAD
<<<<<<< HEAD
        "operationId": "GroupsController_retrieveAllGp",
=======
        "operationId": "GroupsController_retrieveAllGroup",
>>>>>>> group-api
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/group/{id}": {
      "post": {
        "operationId": "GroupsController_createGroupByID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        }
      },
      "get": {
        "operationId": "GroupsController_retrieveGpById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "GroupsController_updateGP",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
=======
        "operationId": "RefreshTokensController_retrieveByUserID",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "header",
>>>>>>> refresh-token-api
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
<<<<<<< HEAD
        "operationId": "GroupsController_deleteGP",
=======
        "operationId": "RefreshTokensController_deletereftoken",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/jwt/refresh/{id}": {
      "get": {
        "operationId": "RefreshTokensController_retrieve",
>>>>>>> refresh-token-api
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
<<<<<<< HEAD
<<<<<<< HEAD
=======
    },
    "/jwt/refresh/{tokenId}": {
      "delete": {
        "operationId": "RefreshTokensController_deleteViaTokenID",
        "parameters": [
          {
            "name": "tokenId",
=======
    },
    "/groups/member": {
      "post": {
        "operationId": "GroupUserController_addUserToGP",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addUserDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "GroupUserController_updateUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addUserDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "GroupUserController_deleteUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/groups/member/{id}": {
      "delete": {
        "operationId": "GroupUserController_delete",
        "parameters": [
          {
            "name": "id",
>>>>>>> group-api
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
<<<<<<< HEAD
>>>>>>> refresh-token-api
=======
>>>>>>> group-api
    }
  },
  "info": {
    "title": "OIDC Protocol setup",
    "description": "This is the project to implement OIDC protocol in nestjs",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
<<<<<<< HEAD
      "JwtConfiguration": {
        "type": "object",
        "properties": {
          "accessTokenKeyID": {
            "type": "string"
          },
          "refreshTokenTimeToLiveInMinutes": {
            "type": "number"
          },
          "timeToLiveInSeconds": {
            "type": "number"
          },
          "idTokenKeyID": {
            "type": "string"
          }
        },
        "required": [
          "accessTokenKeyID",
          "refreshTokenTimeToLiveInMinutes",
          "timeToLiveInSeconds",
          "idTokenKeyID"
        ]
      },
      "CreateTenantDto": {
=======
      "updateDTO": {
>>>>>>> refresh-token-api
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
<<<<<<< HEAD
          },
          "jwtConfiguration": {
            "$ref": "#/components/schemas/JwtConfiguration"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "jwtConfiguration",
          "data"
        ]
      },
      "ResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "success",
          "message",
          "data"
=======
          }
        },
        "required": [
          "name"
        ]
      },
      "generateKeyDTO": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "length": {
            "type": "string"
          },
          "kid": {
            "type": "string"
          }
        },
        "required": [
          "algorithm",
          "issuer",
          "name",
          "length",
          "kid"
        ]
      },
      "refreshDTO": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "refreshToken",
          "token"
>>>>>>> refresh-token-api
        ]
      },
      "addUserDTO": {
        "type": "object",
        "properties": {}
      }
    }
  }
}